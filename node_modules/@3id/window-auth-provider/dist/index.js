import { createClient, createServer } from '@ceramicnetwork/rpc-window';
import { AccountId } from 'caip';
let NAMESPACE = '3id-connect-authprovider';
typeof process !== 'undefined' && (NAMESPACE = process.env.NAMESPACE || '3id-connect-authprovider');
export class AuthProviderClient {
    async accountId() {
        const response = await this.client.request('accountId');
        return new AccountId(response);
    }
    async authenticate(message) {
        return this.client.request('authenticate', {
            message
        });
    }
    async createLink(did) {
        return this.client.request('createLink', {
            did
        });
    }
    withAddress() {
        throw new Error('not implemented');
    }
    constructor(target = window.parent, namespace = NAMESPACE){
        this.isAuthProvider = true;
        this.client = createClient(namespace, target);
    }
}
export function createAuthProviderServer(authProvider, namespace = NAMESPACE) {
    return createServer(namespace, {
        accountId: async ()=>{
            return (await authProvider.accountId()).toString();
        },
        authenticate: async (_event, { message  })=>{
            return await authProvider.authenticate(message);
        },
        createLink: async (_event, { did  })=>{
            return await authProvider.createLink(did);
        }
    });
}
