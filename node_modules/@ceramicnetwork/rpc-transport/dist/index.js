import { RPCClient, createHandler } from 'rpc-utils';
import { firstValueFrom, pipe } from 'rxjs';
import { filter, first, mergeMap } from 'rxjs/operators';
export function createSendRequest(transport) {
    return async function send(req) {
        const res1 = transport.pipe(first((res)=>res.id === req.id
        ));
        transport.next(req);
        return await firstValueFrom(res1);
    };
}
export function createClient(transport) {
    const send = createSendRequest(transport);
    return new RPCClient({
        send
    });
}
export function createHandlerOperator(context, methods, options) {
    const handleRequest = createHandler(methods, options);
    return pipe(mergeMap(async (req)=>await handleRequest(context, req)
    ));
}
export function serve(transport, context, methods, options) {
    return transport.pipe(createHandlerOperator(context, methods, options), filter((res)=>res != null
    )).subscribe(transport);
}
