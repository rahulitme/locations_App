/**
 * ```sh
 * npm install @ceramicnetwork/transport-postmessage
 * ```
 *
 * @module transport-postmessage
 */ import { TransportSubject } from '@ceramicnetwork/transport-subject';
import { fromEvent } from 'rxjs';
import { filter } from 'rxjs/operators';
export function createOriginFilter(allowedOrigin) {
    if (!Array.isArray(allowedOrigin)) {
        allowedOrigin = [
            allowedOrigin
        ];
    }
    return (event)=>allowedOrigin.includes(event.origin)
    ;
}
export function createMessageObservable(target, originOrFilter) {
    const source = fromEvent(target, 'message');
    if (originOrFilter == null) {
        return source;
    }
    const messageFilter = typeof originOrFilter === 'function' ? originOrFilter : createOriginFilter(originOrFilter);
    return source.pipe(filter(messageFilter));
}
export function createPostMessageObserver(target, ...args) {
    return {
        next: (message)=>{
            if (message != null) {
                target.postMessage(message, ...args);
            }
        }
    };
}
export function createPostMessageTransport(from, to = from, options = {}) {
    const postMessageArguments = options.postMessageArguments ?? [];
    const source = createMessageObservable(from, options.filter);
    const sink = createPostMessageObserver(to, ...postMessageArguments);
    return new TransportSubject(source, sink);
}
